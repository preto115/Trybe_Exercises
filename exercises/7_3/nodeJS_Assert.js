/* NodeJS Assert
O m√≥dulo Assert prov√™ uma forma de testar express√µes. Se essa express√£o √© avaliada 
com o valor 0 ou false, o teste falhar√° e o programa ser√° terminado. 
Esse m√≥dulo j√° vem junto com o NodeJS.
Esse m√≥dulo possui v√°rios m√©todos que nos auxiliam nos testes:

assert.equal()
assert.deepStrictEqual()
assert.notEqual()
assert.ok()
assert.fail()

assert() , assert.equal() , assert.ok() e  assert.notEqual() fazem praticamente a mesma coisa.

Um exemplo simples do uso do m√≥dulo Assert:
*/
const assert = require('assert');

assert.equal(50, 50); // OK
//assert.equal(50, 70); // AssertionError: 50 == 70
/* 
Os dois c√≥digos acima utilizam o m√©todo assert.equal. 
Esse m√©todo compara o primeiro e o segundo par√¢metro e, 
se forem diferentes, mostra um erro com a mensagem que est√° no terceiro par√¢metro, 
se houver (o terceiro par√¢metro √© opcional).
*/
function division(x, y) {
  return x / y;
}

const expected = division(9, 3);

assert.equal(expected, 3, 'Mensagem customizada do erro');

//===================================
function add(a, b) {
  return a + b;
}

const expectedSoma = add(1, 2);

assert(expectedSoma === 3, 'one plus two is three');
assert.ok(expectedSoma === 3, 'one plus two is three');
assert.equal(expectedSoma, 3, 'one plus two is three');
assert.notEqual(expectedSoma, 4, 'one plus two is three (NOT Four!)');
//===================================
//√â poss√≠vel tamb√©m testar estruturas:

const list1 = [1, 2, 3, 4, 5];
const list2 = [1, 2, 3, 4, 5];
// deepEqual checks the elements in the arrays are identical
assert.deepEqual(list1, list2, 'deepEqual checks the elements in the arrays are identical');

const person1 = { name: 'john', age: 21 };
const person2 = { name: 'john', age: 21 };

assert.deepEqual(person1, person2, 'these two objects are the same');

const person3 = { name: 'john', age: 19 };

assert.notDeepEqual(person1, person3, 'these two objects are different');
//====================================
// declara√ß√£o da fun√ß√£o division, definida anteriormente...

assert.equal(division(10, 2), 5); // OK
//assert.equal(division(10, 0), 0); // üí£
/* O primeiro assert.equal funciona e n√£o apresenta erro, mas o segundo deixa evidente
 uma fragilidade na implementa√ß√£o da fun√ß√£o division, pois n√£o poderia ser 
 poss√≠vel realizar a divis√£o por 0. Nesse caso, devemos melhorar a implementa√ß√£o 
 da fun√ß√£o division, a fim de n√£o termos mais esse estado inconsistente.
 */

function division(x, y) {
  if (y === 0) throw new Error('parameter y must not be 0');
  return x / y;
}


assert.equal(division(10, 2), 5); // OK
assert.throws(() => { division(10, 0); }, /^Error: parameter y must not be 0$/); // OK
console.log(division(10,0));

/*
Atualizamos o teste para refletir a mudan√ßa de implementa√ß√£o, ou seja, 
os testes unit√°rios tamb√©m nos ajudam a identificar 
casos especiais que podem levar nossas fun√ß√µes a estados inv√°lidos.
*/